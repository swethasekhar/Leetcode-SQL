Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key (combination of columns with unique values) of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
 

Write a solution to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.

The result format is in the following example.


Example 1:

Input: 
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+
Output: 
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+
Explanation: 
Only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33


-- SQL Solution





WITH first_login_date AS (
    SELECT MIN(event_date) AS first_login, player_id 
    FROM Activity
    GROUP BY player_id
),
lag_date AS (
    SELECT Activity.player_id, event_date, LAG(event_date) OVER(PARTITION BY player_id ORDER BY event_date) AS prev_day
    FROM Activity
    INNER JOIN first_login_date ON Activity.player_id = first_login_date.player_id
)
SELECT 
ROUND(SUM(IF(DATEDIFF(event_date,prev_day)=1,1,0))/COUNT(DISTINCT first_login_date.player_id),2) AS fraction
FROM first_login_date 
LEFT JOIN lag_date ON lag_date.player_id = first_login_date.player_id
AND lag_date.prev_day = first_login_date.first_login


Explanation:

Find the first login for each player
Find the previous date for each event date of the player
The previous date and the event date diff should be equal to 1, but we need to see if the previous date is equal to first login date
Reasoning: because there might be cases where the user can login next day regardless of when the logged in first
Example : player_id    date
            1       2024-04-01
            1       2024-04-05
            1       2024-04-06
In the above example the prev_date column will look like  
         player_id    date       prev_date(calculated based on lag)  diff between prev date and event date
            1       2024-04-01    null                                  null
            1       2024-04-05    2024-04-01                            4
            1       2024-04-06    2024-04-05                            1 (but this row needs to be filtered out since the user logged in next day, but not next day from the first login which is 2024-04-01)



